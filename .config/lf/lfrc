# ===============
#  Basic Options
# ===============
set shell bash # Interpreter for shell commands (needs to be POSIX compatible)

set ratios 1:3:4
set drawbox
set scrolloff 4
set ifs "\n"
set tabstop 6 # Tabwidth
set preview
set previewer '~/.config/lf/preview'
set period 1 # Periodic loading

# Searching
set findlen 2 # 0 is to search until matched
set ignoredia
set smartdia
set globsearch
set incsearch

# ===========
#  Functions
# ===========
cmd on-cd &{{
	# Display git repository status in your prompt
	. /usr/share/git/completion/git-prompt.sh
	GIT_PS1_SHOWDIRTYSTATE=1
	GIT_PS1_SHOWSTASHSTATE=1
	GIT_PS1_SHOWUNTRACKEDFILES=1
	GIT_PS1_SHOWUPSTREAM="auto verbose"

	git="$(__git_ps1 [%s])" || true
	PS1="\033[01;34m%d\033[0m\033[1m%f \033[01;33m$git"
	lf -remote "send $id set promptfmt \"$PS1\""
}}
on-cd # Ensure on-cd runs on startup

# Define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
	case "$(file --mime-type "$f" -b)" in
		text/*) "$EDITOR" $fx;;
		*) for f in $fx; do setsid "$OPENER" "$f" &>/dev/null & done;;
	esac
}}

# ===================
#  File Manipulation
# ===================
# TODO: listen to esc (when implemented: stty intr ^[)
cmd mkdir %{{
	printf 'Directory name: '
	read dirname
	mkdir -p "$dirname"
}}

cmd touch %{{
	printf 'File name: '
	read filename
	touch "$filename"
}}

cmd delete %{{
	printf 'Delete? [y/N] '
	read ans
	[ "$ans" != 'y' ] && exit 0
	rm -rf -- $fx
}}

cmd toggle-execute &{{
	for file in $fx; do
		if [ -x "$file" ]; then
			chmod -x "$file"
		else
			chmod u+x "$file"
		fi
	done
	lf -remote "send $id reload"
}}

# ==========
#  Renaming
# ==========
cmd rename-clear &{{
	# Multiple files - bulkrename
	[ "$(echo "$fx" | wc -l)" -gt 1 ] && {
		lf -remote "send $id rename-bulk"
		exit
	}

	# Single file
	lf -remote "send $id :rename; cmd-delete-home"$'\n'
}}

cmd rename-edit &{{
	# Multiple files - bulkrename
	[ "$(echo "$fx" | wc -l)" -gt 1 ] && {
		lf -remote "send $id rename-bulk"
		exit
	}

	# Single file
	lf -remote "send $id rename"
}}

cmd rename-bulk ${{
	old="$(mktemp)"
	new="$(mktemp)"
	printf "$fs\n" > "$old"
	printf "$fs\n" > "$new"
	"$EDITOR" "$new"
	[ "$(cat "$new" | wc -l)" -ne "$(cat "$old" | wc -l)" ] && exit
	paste "$old" "$new" | while read names; do
		src=$(printf "$names" | cut -f1)
		dst=$(printf "$names" | cut -f2)
		[ "$src" = "$dst" ] && continue
		[ -e "$dst" ] && continue
		mv "$src" "$dst"
	done
	rm "$old" "$new"
	lf -remote "send $id unselect"
}}

cmd rename-front :rename; cmd-home
cmd rename-back :rename; cmd-end

# ===============
#  Fuzzy finding
# ===============
cmd fzf-select &{{
	[ -d "$1" ] && cmd="cd" || cmd="select"
	lf -remote "send $id $cmd \"$1\""
}}

cmd fzf-find ${{
	res="$(find . -maxdepth 1 \( -type d -printf "%p/\n" \) -o -print | \
		tail +2 | cut -b3- | sort | fzf --height='100%')" || exit 0
	lf -remote "send $id fzf-select \"$res\""
}}

cmd fzf-locate-std ${{
	res="$(locate -r "^$PWD/" | fzf --height='100%' | \
		# while read -r line; do
		# 	printf '%s%s\n' "$line" "$([ -d "$line" ] && printf '/')"
		# done | \
		sed "s|${PWD}/||")" || exit 0
	lf -remote "send $id cd \"$(dirname "${PWD}/$res")\""$'\n'"send $id fzf-select \"$(basename "$res")\""
}}

cmd fzf-locate-adv ${{
	res="$(locate -r "^$PWD/" | \
		# while read -r line; do
		# 	printf '%s%s\n' "$line" "$([ -d "$line" ] && printf '/')"
		# done | \
		sed "s|${PWD}/||" | fzf --height='100%')" || exit 0
	lf -remote "send $id cd \"$(dirname "${PWD}/$res")\""$'\n'"send $id fzf-select \"$(basename "$res")\""
}}

# ==========
#  Movement
# ==========
cmd high %{{
}}

cmd middle %{{
}}

cmd low %{{
}}

# ========
#  Dragon
# ========
cmd dragon &{{
	if [ "$(echo "$fx" | wc -l)" -gt 1 ]; then
		# Multiple files
		dragon-drop $fx
	else
		# Single file
		dragon-drop --and-exit $fx
	fi
}}

# ====================
#  Automatic resizing
# ====================
# TODO: hook
# cmd recol &{{
#     w=$(tput cols)
#     if [ $w -le 80 ]; then
#         lf -remote "send $id set ratios 1:2"
#     elif [ $w -le 160 ]; then
#         lf -remote "send $id set ratios 1:2:3"
#     else
#         lf -remote "send $id set ratios 1:2:3:5"
#     fi
# }}

# =================
#  Command mapping
# =================
# File manipulation
map w
map wf touch
map wd mkdir
map D delete
map X toggle-execute
map p :paste; clear

# Renaming
map r
map re rename-edit
map rc rename-clear
map I  rename-front
map A  rename-back

# Fuzzy finding
map / fzf-locate-std
map ? fzf-locate-adv
map f fzf-find

# Movement
map H high
map M middle
map L low

# Archives
map az $lf-zip "$id" $fx
map at $lf-tar "$id" $fx
map ag $lf-targz "$id" $fx
map ab $lf-tarbz2 "$id" $fx
map x  $atool -x $fx

# Other
map - dragon
map e $"$EDITOR" $fx
map i $~/.config/lf/preview $f | "$PAGER" -R
map <enter> open

# Command line
cmap <up> cmd-history-prev
cmap <down> cmd-history-next

# ===================
#  Directory mapping
# ===================

# Previous folder (ensure that ' bookmark exists)
push m'
map g- push ''

# Other
source ~/.local/src/generated/aliases_lf
